#!/usr/bin/python3
"""
Contains the BaseModel class
"""
import uuid
from datetime import datetime

class BaseModel:
    """
    BaseModel class
    """
    def __init__(self, **kwargs):
        """
        Initializes a BaseModel instance

        Sets the following instance attributes:
        id (str): unique id generated by uuid
        created_at (datetime): datetime object of creation time
        updated_at (datetime): datetime object of last modification time
        """
        if not kwargs:
            self.id = str(uuid.uuid4())
            self.created_at = datetime.now()
            self.updated_at = datetime.now()
        else:
            for key, value in kwargs.items():
                if key == "created_at" or key == "updated_at":
                    value = datetime.strptime(value, "%Y-%m-%dT%H:%M:%S.%f")
                if key != "__class__":
                    setattr(self, key, value)

    def __str__(self):
        """
        Returns a string representation of the BaseModel instance,
        including the class name, id, created_at, and updated_at.
        """
        return f"[{self.__class__.__name__}] ({self.id}) {self.__dict__}"

    def save(self):

        """
        Updates the public instance attribute updated_at with the current
        datetime.
        """
        self.updated_at = datetime.now()

    def to_dict(self):
        """
        Returns a dictionary representation of the BaseModel instance,
        including the class name, id, created_at, and updated_at.
        """
        new_dict = self.__dict__.copy()
        new_dict["__class__"] = self.__class__.__name__
        for key, value in new_dict.items():
            if isinstance(value, datetime):
                new_dict[key] = value.isoformat()
        return new_dict